/*
 * Copyright (c) 2017, Intel Corporation
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *   * Neither the name of Intel Corporation nor the names of its contributors
 *     may be used to endorse or promote products derived from this software
 *     without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
#ifndef CR_MGMT_FW_COMMANDS_H
#define CR_MGMT_FW_COMMANDS_H

#include "common.h"
#include "fis_commands.h"

#ifdef __cplusplus
extern "C"
{
#endif

//- macro multiple_field(name)
	int {{name}}_count;
	struct {{name|fw_cmd_data}} *{{name}};
//- endmacro

//- macro simple_field(f)
{%-	if f.is_struct -%}
struct {{f.struct_type|fw_cmd_data}} {{f.name}};
{%-	elif f.is_struct_array -%}
struct {{f.struct_type|fw_cmd_data}} {{f.name}}[{{f.struct_array_count}}];
{%-	else -%}
{{f.c_definition}};
{%- 	for b in f.bits %}
	unsigned char {{f.name}}_{{b.name}};
{%- 	endfor -%}
{%-	endif -%}
//- endmacro

//- macro field(f)
//- if not f.ignore
//-		if f.is_union
	union
	{
		unsigned char bytes[{{f.byte_count}}];
//- 		for u in f.union_payloads
		{{simple_field(u)}}
//- 		endfor
	} {{f.name}};
//-		else
	{{simple_field(f)}}
//-		endif
//- endif
//- endmacro

//- macro payload_fields(payload)
{%- for f in payload.fields -%}
{{field(f)}}
{%- endfor -%}
{%- for r in payload.payload_refs -%}
//- 	if r.is_type_based
//- 		for t in r.types
//- 			if r.is_multiple
{{multiple_field(r.types[t])}}
//- 			else
	struct {{r.name|fw_cmd_data}} {{r.name}};
//- 			endif
//- 		endfor
//-		elif r.is_struct
	struct {{r.struct_type|fw_cmd_data}} {{r.name}};    
//-		elif r.is_struct_array
	struct {{r.struct_type|fw_cmd_data}} {{r.name}}[{{r.struct_array_count}}];  
//- 	else
//- 		if r.is_multiple
{{multiple_field(r.name)}}
//- 		else
	struct {{r.name|fw_cmd_data}} {{r.name}};
//- 		endif
//- 	endif
{%- endfor -%}
//- endmacro

enum fwcmd_error_type
{
	FWCMD_ERROR_TYPE_UNKNOWN = 0,
	FWCMD_ERROR_TYPE_PT = 1,
	FWCMD_ERROR_TYPE_FW = 2,
	FWCMD_ERROR_TYPE_PARSE = 3,
	FWCMD_ERROR_TYPE_DUMP = 4,
	FWCMD_ERROR_TYPE_DRIVER = 5
};

enum fwcmd_error
{
	FWCMD_ERR_UNKNOWN = 1,
	FWCMD_ERR_NOMEMORY = 2
};

PACK_STRUCT(
struct fwcmd_error_code
{
	enum fwcmd_error_type type;
	unsigned int code;
}  )

//- for cmd in commands
/*
 * Data Structures for {{cmd.name}}
 */
//- 	for s in cmd.sub_payloads
PACK_STRUCT(
struct {{s.name|fw_cmd_data}}
{
{{payload_fields(s.payload)}}
}  )

//- 	endfor

//- 	if cmd.has_output
PACK_STRUCT(
struct {{cmd.name|fw_cmd_data}}
{
{{payload_fields(cmd.output_payload)}}
}  )
//- 	endif

PACK_STRUCT(
struct {{cmd.name|fw_cmd_result}}
{
	int success:1;
	struct fwcmd_error_code error_code;
//- 	if cmd.has_output
	struct {{cmd.name|fw_cmd_data}} *p_data;
//- 	endif
}  )

/*
 * Firmware Command Function {{cmd.name}}
 */
struct {{cmd.name|fw_cmd_result}} {{cmd|fw_cmd_name}}(unsigned int handle
	{%- for f in cmd.input_fields_not_ignored -%}
	,
	const {{f.c_definition}}
	{%- endfor -%}
);

//- 	if cmd.has_output
void {{cmd.name|fw_cmd_free}}(struct {{cmd.name|fw_cmd_result}} *p_result);
//- 	endif

//- endfor

int fwcmd_is_command_name(const char * cmd_name);

int fwcmd_is_output_command_name(const char * cmd_name);

#ifdef __cplusplus
}
#endif

#endif //CR_MGMT_FW_COMMANDS_H
