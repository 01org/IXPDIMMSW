/*
 * Copyright (c) 2017, Intel Corporation
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *   * Neither the name of Intel Corporation nor the names of its contributors
 *     may be used to endorse or promote products derived from this software
 *     without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

//- macro printer(name, payload, tab_counter)
void {{name|fw_cmd_printer}}(const struct {{name|fw_cmd_data}} *p_value, int {{tab_counter}})
{
	print_tabs({{tab_counter}});
	printf("{{name|camel}}:\n");
//- 		for f in payload.fields
//- 			if not f.ignore
	print_tabs({{tab_counter}} + 1);
	printf("{{f.name|camel}}: {{f.print_type}}\n", p_value->{{f.name}});
//-					for b in f.bits
	print_tabs({{tab_counter}} + 2);
	printf("{{b.name|camel}}: %d\n", p_value->{{f.name}}_{{b.name}});
//-					endfor
//- 			endif
//- 		endfor
//- 		for r in payload.payload_refs:
//- 			if r.is_type_based
//- 				for t in r.types
//- 					set name=r.types[t]
//-						if r.is_multiple
	for (size_t i = 0; i < p_value->{{name}}_count; i++)
	{
		{{name|fw_cmd_printer}}(&p_value->{{name}}[i], {{tab_counter}} + 1);
	}
//- 					else
	{{name|fw_cmd_printer}}(&p_value->{{name}}, {{tab_count}} + 1);
//- 					endif
//- 				endfor
//- 			else
//-					if r.is_multiple
	for (size_t i = 0; i < p_value->{{r.name}}_count; i++)
	{
		{{r.name|fw_cmd_printer}}(&p_value->{{r.name}}[i], {{tab_counter}} + 1);
	}

//- 				else
	{{r.name|fw_cmd_printer}}(&p_value->{{r.name}}, {{tab_counter}} + 1);
//- 				endif
//- 			endif
//- 		endfor
}
//- endmacro

#include "fw_command_printer.h"
#include <driver_interface/passthrough.h>
#include <stdio.h>


void print_tabs(int tab_count)
{
	for(int i = 0; i < tab_count; i++)
	{
		printf("\t");
	}
}

void fwcmd_print_error(struct fwcmd_error_code error)
{
	switch (error.type)
	{
		case FWCMD_ERROR_TYPE_DRIVER:
    		printf("Driver error: 0x%x\n", error.code);
			break;
    	case FWCMD_ERROR_TYPE_PT:
			{
				printf("Passthrough Error: 0x%x\n", error.code);
				char error_message[1024];
				pt_get_error_message(error.code, error_message, 1024);
				printf("%s", error_message);

            	break;
			}
    	case FWCMD_ERROR_TYPE_PARSE:
    		printf("Parsing error: 0x%x\n", error.code);
			break;
    	case FWCMD_ERROR_TYPE_DUMP:
    		printf("Error: 0x%x\n", error.code);
			break;
		default:
			printf("Unknown error type: %d\n", error.type);
	}
}

void fwcmd_print_command_names()
{
	printf("Commands: \n");
	//- for cmd in commands
	printf("\t{{cmd.name}}\n");
    //- endfor
}

void fwcmd_print_output_command_names()
{
	printf("Commands with output: \n");

//- for cmd in commands
//- 	if cmd.has_output
	printf("\t{{cmd.name}}\n");
//-		endif
//-	endfor
}


//- for cmd in commands
//- 	if cmd.has_output
//- 		for s in cmd.sub_payloads
{{printer(s.name, s.payload, "indent_count")}}
//- 		endfor
{{printer(cmd.name, cmd.output_payload, "indent_count")}}
//- 	endif
//- endfor
